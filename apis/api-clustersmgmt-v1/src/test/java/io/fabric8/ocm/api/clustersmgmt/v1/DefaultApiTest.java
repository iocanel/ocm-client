/*
 * clusters_mgmt
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: ocm-feedback@redhat.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.fabric8.ocm.api.clustersmgmt.v1;

import io.fabric8.ocm.api.clustersmgmt.ApiException;
import io.fabric8.ocm.model.clustersmgmt.v1.AWS;
import io.fabric8.ocm.model.clustersmgmt.v1.AWSInfrastructureAccessRole;
import io.fabric8.ocm.model.clustersmgmt.v1.AWSInfrastructureAccessRoleGrant;
import io.fabric8.ocm.model.clustersmgmt.v1.AddOn;
import io.fabric8.ocm.model.clustersmgmt.v1.AddOnInstallation;
import io.fabric8.ocm.model.clustersmgmt.v1.AlertsInfo;
import io.fabric8.ocm.model.clustersmgmt.v1.CPUTotalsNodeRoleOSMetricNode;
import io.fabric8.ocm.model.clustersmgmt.v1.CloudProvider;
import io.fabric8.ocm.model.clustersmgmt.v1.CloudRegion;
import io.fabric8.ocm.model.clustersmgmt.v1.Cluster;
import io.fabric8.ocm.model.clustersmgmt.v1.ClusterCredentials;
import io.fabric8.ocm.model.clustersmgmt.v1.ClusterOperatorsInfo;
import io.fabric8.ocm.model.clustersmgmt.v1.ClusterStatus;
import io.fabric8.ocm.model.clustersmgmt.v1.Dashboard;
import io.fabric8.ocm.model.clustersmgmt.v1.Error;
import io.fabric8.ocm.model.clustersmgmt.v1.ExternalConfiguration;
import io.fabric8.ocm.model.clustersmgmt.v1.Flavour;
import io.fabric8.ocm.model.clustersmgmt.v1.Group;
import io.fabric8.ocm.model.clustersmgmt.v1.IdentityProvider;
import io.fabric8.ocm.model.clustersmgmt.v1.Ingress;
import io.fabric8.ocm.model.clustersmgmt.v1.InlineResponse200;
import io.fabric8.ocm.model.clustersmgmt.v1.InlineResponse2001;
import io.fabric8.ocm.model.clustersmgmt.v1.InlineResponse20010;
import io.fabric8.ocm.model.clustersmgmt.v1.InlineResponse20011;
import io.fabric8.ocm.model.clustersmgmt.v1.InlineResponse20012;
import io.fabric8.ocm.model.clustersmgmt.v1.InlineResponse20013;
import io.fabric8.ocm.model.clustersmgmt.v1.InlineResponse20014;
import io.fabric8.ocm.model.clustersmgmt.v1.InlineResponse20015;
import io.fabric8.ocm.model.clustersmgmt.v1.InlineResponse20016;
import io.fabric8.ocm.model.clustersmgmt.v1.InlineResponse20017;
import io.fabric8.ocm.model.clustersmgmt.v1.InlineResponse20018;
import io.fabric8.ocm.model.clustersmgmt.v1.InlineResponse20019;
import io.fabric8.ocm.model.clustersmgmt.v1.InlineResponse2002;
import io.fabric8.ocm.model.clustersmgmt.v1.InlineResponse20020;
import io.fabric8.ocm.model.clustersmgmt.v1.InlineResponse20021;
import io.fabric8.ocm.model.clustersmgmt.v1.InlineResponse20022;
import io.fabric8.ocm.model.clustersmgmt.v1.InlineResponse2003;
import io.fabric8.ocm.model.clustersmgmt.v1.InlineResponse2004;
import io.fabric8.ocm.model.clustersmgmt.v1.InlineResponse2005;
import io.fabric8.ocm.model.clustersmgmt.v1.InlineResponse2006;
import io.fabric8.ocm.model.clustersmgmt.v1.InlineResponse2007;
import io.fabric8.ocm.model.clustersmgmt.v1.InlineResponse2008;
import io.fabric8.ocm.model.clustersmgmt.v1.InlineResponse2009;
import io.fabric8.ocm.model.clustersmgmt.v1.Label;
import io.fabric8.ocm.model.clustersmgmt.v1.Log;
import io.fabric8.ocm.model.clustersmgmt.v1.MachinePool;
import io.fabric8.ocm.model.clustersmgmt.v1.Metadata;
import io.fabric8.ocm.model.clustersmgmt.v1.NodesInfo;
import io.fabric8.ocm.model.clustersmgmt.v1.Product;
import io.fabric8.ocm.model.clustersmgmt.v1.ProvisionShard;
import io.fabric8.ocm.model.clustersmgmt.v1.SocketTotalsNodeRoleOSMetricNode;
import io.fabric8.ocm.model.clustersmgmt.v1.Syncset;
import io.fabric8.ocm.model.clustersmgmt.v1.UpgradePolicy;
import io.fabric8.ocm.model.clustersmgmt.v1.UpgradePolicyState;
import io.fabric8.ocm.model.clustersmgmt.v1.User;
import io.fabric8.ocm.model.clustersmgmt.v1.Version;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * 
     *
     * Deletes the add-on. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1AddonsAddonIdDeleteTest() throws ApiException {
        String addonId = null;
        api.apiClustersMgmtV1AddonsAddonIdDelete(addonId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the add-on. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1AddonsAddonIdGetTest() throws ApiException {
        String addonId = null;
        AddOn response = api.apiClustersMgmtV1AddonsAddonIdGet(addonId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Updates the add-on. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1AddonsAddonIdPatchTest() throws ApiException {
        String addonId = null;
        AddOn body = null;
        AddOn response = api.apiClustersMgmtV1AddonsAddonIdPatch(addonId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the list of add-ons. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1AddonsGetTest() throws ApiException {
        String order = null;
        Integer page = null;
        String search = null;
        Integer size = null;
        InlineResponse200 response = api.apiClustersMgmtV1AddonsGet(order, page, search, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Create a new add-on and add it to the collection of add-ons. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1AddonsPostTest() throws ApiException {
        AddOn body = null;
        AddOn response = api.apiClustersMgmtV1AddonsPost(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the aws infrastructure access role. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1AwsInfrastructureAccessRolesAwsInfrastructureAccessRoleIdGetTest() throws ApiException {
        String awsInfrastructureAccessRoleId = null;
        AWSInfrastructureAccessRole response = api.apiClustersMgmtV1AwsInfrastructureAccessRolesAwsInfrastructureAccessRoleIdGet(awsInfrastructureAccessRoleId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1AwsInfrastructureAccessRolesGetTest() throws ApiException {
        String order = null;
        Integer page = null;
        String search = null;
        Integer size = null;
        InlineResponse2001 response = api.apiClustersMgmtV1AwsInfrastructureAccessRolesGet(order, page, search, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the list of available regions of the cloud provider.  IMPORTANT: This collection doesn&#x27;t currently support paging or searching, so the returned &#x60;page&#x60; will always be 1 and &#x60;size&#x60; and &#x60;total&#x60; will always be the total number of available regions of the provider. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1CloudProvidersCloudProviderIdAvailableRegionsPostTest() throws ApiException {
        String cloudProviderId = null;
        AWS body = null;
        Integer page = null;
        Integer size = null;
        InlineResponse2003 response = api.apiClustersMgmtV1CloudProvidersCloudProviderIdAvailableRegionsPost(cloudProviderId, body, page, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the cloud provider. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1CloudProvidersCloudProviderIdGetTest() throws ApiException {
        String cloudProviderId = null;
        CloudProvider response = api.apiClustersMgmtV1CloudProvidersCloudProviderIdGet(cloudProviderId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the list of regions of the cloud provider.  IMPORTANT: This collection doesn&#x27;t currently support paging or searching, so the returned &#x60;page&#x60; will always be 1 and &#x60;size&#x60; and &#x60;total&#x60; will always be the total number of regions of the provider. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1CloudProvidersCloudProviderIdRegionsGetTest() throws ApiException {
        String cloudProviderId = null;
        Integer page = null;
        Integer size = null;
        InlineResponse2004 response = api.apiClustersMgmtV1CloudProvidersCloudProviderIdRegionsGet(cloudProviderId, page, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the region. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1CloudProvidersCloudProviderIdRegionsRegionIdGetTest() throws ApiException {
        String cloudProviderId = null;
        String regionId = null;
        CloudRegion response = api.apiClustersMgmtV1CloudProvidersCloudProviderIdRegionsRegionIdGet(cloudProviderId, regionId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the list of cloud providers. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1CloudProvidersGetTest() throws ApiException {
        String order = null;
        Integer page = null;
        String search = null;
        Integer size = null;
        InlineResponse2002 response = api.apiClustersMgmtV1CloudProvidersGet(order, page, search, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the add-on installation. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdAddonsAddoninstallationIdGetTest() throws ApiException {
        String clusterId = null;
        String addoninstallationId = null;
        AddOnInstallation response = api.apiClustersMgmtV1ClustersClusterIdAddonsAddoninstallationIdGet(clusterId, addoninstallationId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the list of add-on installations. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdAddonsGetTest() throws ApiException {
        String clusterId = null;
        String order = null;
        Integer page = null;
        String search = null;
        Integer size = null;
        InlineResponse2006 response = api.apiClustersMgmtV1ClustersClusterIdAddonsGet(clusterId, order, page, search, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Create a new add-on installation and add it to the collection of add-on installations on the cluster. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdAddonsPostTest() throws ApiException {
        String clusterId = null;
        AddOnInstallation body = null;
        AddOnInstallation response = api.apiClustersMgmtV1ClustersClusterIdAddonsPost(clusterId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes the AWS infrastructure access role grant. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdAwsInfrastructureAccessRoleGrantsAwsInfrastructureAccessRoleGrantIdDeleteTest() throws ApiException {
        String clusterId = null;
        String awsInfrastructureAccessRoleGrantId = null;
        api.apiClustersMgmtV1ClustersClusterIdAwsInfrastructureAccessRoleGrantsAwsInfrastructureAccessRoleGrantIdDelete(clusterId, awsInfrastructureAccessRoleGrantId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the AWS infrastructure access role grant. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdAwsInfrastructureAccessRoleGrantsAwsInfrastructureAccessRoleGrantIdGetTest() throws ApiException {
        String clusterId = null;
        String awsInfrastructureAccessRoleGrantId = null;
        AWSInfrastructureAccessRoleGrant response = api.apiClustersMgmtV1ClustersClusterIdAwsInfrastructureAccessRoleGrantsAwsInfrastructureAccessRoleGrantIdGet(clusterId, awsInfrastructureAccessRoleGrantId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the list of AWS infrastructure access role grants. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdAwsInfrastructureAccessRoleGrantsGetTest() throws ApiException {
        String clusterId = null;
        String order = null;
        Integer page = null;
        String search = null;
        Integer size = null;
        InlineResponse2007 response = api.apiClustersMgmtV1ClustersClusterIdAwsInfrastructureAccessRoleGrantsGet(clusterId, order, page, search, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Create a new AWS infrastructure access role grant and add it to the collection of AWS infrastructure access role grants on the cluster. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdAwsInfrastructureAccessRoleGrantsPostTest() throws ApiException {
        String clusterId = null;
        AWSInfrastructureAccessRoleGrant body = null;
        AWSInfrastructureAccessRoleGrant response = api.apiClustersMgmtV1ClustersClusterIdAwsInfrastructureAccessRoleGrantsPost(clusterId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the credentials of a cluster. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdCredentialsGetTest() throws ApiException {
        String clusterId = null;
        ClusterCredentials response = api.apiClustersMgmtV1ClustersClusterIdCredentialsGet(clusterId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes the cluster. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdDeleteTest() throws ApiException {
        String clusterId = null;
        api.apiClustersMgmtV1ClustersClusterIdDelete(clusterId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the external configuration. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdExternalConfigurationGetTest() throws ApiException {
        String clusterId = null;
        ExternalConfiguration response = api.apiClustersMgmtV1ClustersClusterIdExternalConfigurationGet(clusterId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the list of labels. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdExternalConfigurationLabelsGetTest() throws ApiException {
        String clusterId = null;
        Integer page = null;
        Integer size = null;
        InlineResponse2008 response = api.apiClustersMgmtV1ClustersClusterIdExternalConfigurationLabelsGet(clusterId, page, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes the label. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdExternalConfigurationLabelsLabelIdDeleteTest() throws ApiException {
        String clusterId = null;
        String labelId = null;
        api.apiClustersMgmtV1ClustersClusterIdExternalConfigurationLabelsLabelIdDelete(clusterId, labelId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the label. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdExternalConfigurationLabelsLabelIdGetTest() throws ApiException {
        String clusterId = null;
        String labelId = null;
        Label response = api.apiClustersMgmtV1ClustersClusterIdExternalConfigurationLabelsLabelIdGet(clusterId, labelId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Update the label. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdExternalConfigurationLabelsLabelIdPatchTest() throws ApiException {
        String clusterId = null;
        String labelId = null;
        Label body = null;
        Label response = api.apiClustersMgmtV1ClustersClusterIdExternalConfigurationLabelsLabelIdPatch(clusterId, labelId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Adds a new label to the cluster. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdExternalConfigurationLabelsPostTest() throws ApiException {
        String clusterId = null;
        Label body = null;
        Label response = api.apiClustersMgmtV1ClustersClusterIdExternalConfigurationLabelsPost(clusterId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the list of syncsets. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdExternalConfigurationSyncsetsGetTest() throws ApiException {
        String clusterId = null;
        Integer page = null;
        Integer size = null;
        InlineResponse2009 response = api.apiClustersMgmtV1ClustersClusterIdExternalConfigurationSyncsetsGet(clusterId, page, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Adds a new syncset to the cluster. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdExternalConfigurationSyncsetsPostTest() throws ApiException {
        String clusterId = null;
        Syncset body = null;
        Syncset response = api.apiClustersMgmtV1ClustersClusterIdExternalConfigurationSyncsetsPost(clusterId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes the syncset. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdExternalConfigurationSyncsetsSyncsetIdDeleteTest() throws ApiException {
        String clusterId = null;
        String syncsetId = null;
        api.apiClustersMgmtV1ClustersClusterIdExternalConfigurationSyncsetsSyncsetIdDelete(clusterId, syncsetId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the syncset. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdExternalConfigurationSyncsetsSyncsetIdGetTest() throws ApiException {
        String clusterId = null;
        String syncsetId = null;
        Syncset response = api.apiClustersMgmtV1ClustersClusterIdExternalConfigurationSyncsetsSyncsetIdGet(clusterId, syncsetId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Update the syncset. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdExternalConfigurationSyncsetsSyncsetIdPatchTest() throws ApiException {
        String clusterId = null;
        String syncsetId = null;
        Syncset body = null;
        Syncset response = api.apiClustersMgmtV1ClustersClusterIdExternalConfigurationSyncsetsSyncsetIdPatch(clusterId, syncsetId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the cluster. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdGetTest() throws ApiException {
        String clusterId = null;
        Cluster response = api.apiClustersMgmtV1ClustersClusterIdGet(clusterId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the list of groups. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdGroupsGetTest() throws ApiException {
        String clusterId = null;
        Integer page = null;
        Integer size = null;
        InlineResponse20010 response = api.apiClustersMgmtV1ClustersClusterIdGroupsGet(clusterId, page, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the group. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdGroupsGroupIdGetTest() throws ApiException {
        String clusterId = null;
        String groupId = null;
        Group response = api.apiClustersMgmtV1ClustersClusterIdGroupsGroupIdGet(clusterId, groupId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the list of users. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdGroupsGroupIdUsersGetTest() throws ApiException {
        String clusterId = null;
        String groupId = null;
        Integer page = null;
        Integer size = null;
        InlineResponse20011 response = api.apiClustersMgmtV1ClustersClusterIdGroupsGroupIdUsersGet(clusterId, groupId, page, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Adds a new user to the group. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdGroupsGroupIdUsersPostTest() throws ApiException {
        String clusterId = null;
        String groupId = null;
        User body = null;
        User response = api.apiClustersMgmtV1ClustersClusterIdGroupsGroupIdUsersPost(clusterId, groupId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes the user. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdGroupsGroupIdUsersUserIdDeleteTest() throws ApiException {
        String clusterId = null;
        String groupId = null;
        String userId = null;
        api.apiClustersMgmtV1ClustersClusterIdGroupsGroupIdUsersUserIdDelete(clusterId, groupId, userId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the user. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdGroupsGroupIdUsersUserIdGetTest() throws ApiException {
        String clusterId = null;
        String groupId = null;
        String userId = null;
        User response = api.apiClustersMgmtV1ClustersClusterIdGroupsGroupIdUsersUserIdGet(clusterId, groupId, userId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the list of identity providers. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdIdentityProvidersGetTest() throws ApiException {
        String clusterId = null;
        Integer page = null;
        Integer size = null;
        InlineResponse20012 response = api.apiClustersMgmtV1ClustersClusterIdIdentityProvidersGet(clusterId, page, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes the identity provider. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdIdentityProvidersIdentityProviderIdDeleteTest() throws ApiException {
        String clusterId = null;
        String identityProviderId = null;
        api.apiClustersMgmtV1ClustersClusterIdIdentityProvidersIdentityProviderIdDelete(clusterId, identityProviderId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the identity provider. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdIdentityProvidersIdentityProviderIdGetTest() throws ApiException {
        String clusterId = null;
        String identityProviderId = null;
        IdentityProvider response = api.apiClustersMgmtV1ClustersClusterIdIdentityProvidersIdentityProviderIdGet(clusterId, identityProviderId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Update identity provider in the cluster. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdIdentityProvidersIdentityProviderIdPatchTest() throws ApiException {
        String clusterId = null;
        String identityProviderId = null;
        IdentityProvider body = null;
        IdentityProvider response = api.apiClustersMgmtV1ClustersClusterIdIdentityProvidersIdentityProviderIdPatch(clusterId, identityProviderId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Adds a new identity provider to the cluster. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdIdentityProvidersPostTest() throws ApiException {
        String clusterId = null;
        IdentityProvider body = null;
        IdentityProvider response = api.apiClustersMgmtV1ClustersClusterIdIdentityProvidersPost(clusterId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the list of ingresses. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdIngressesGetTest() throws ApiException {
        String clusterId = null;
        Integer page = null;
        Integer size = null;
        InlineResponse20013 response = api.apiClustersMgmtV1ClustersClusterIdIngressesGet(clusterId, page, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes the ingress. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdIngressesIngressIdDeleteTest() throws ApiException {
        String clusterId = null;
        String ingressId = null;
        api.apiClustersMgmtV1ClustersClusterIdIngressesIngressIdDelete(clusterId, ingressId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the ingress. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdIngressesIngressIdGetTest() throws ApiException {
        String clusterId = null;
        String ingressId = null;
        Ingress response = api.apiClustersMgmtV1ClustersClusterIdIngressesIngressIdGet(clusterId, ingressId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Updates the ingress. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdIngressesIngressIdPatchTest() throws ApiException {
        String clusterId = null;
        String ingressId = null;
        Ingress body = null;
        Ingress response = api.apiClustersMgmtV1ClustersClusterIdIngressesIngressIdPatch(clusterId, ingressId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Updates all ingresses 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdIngressesPatchTest() throws ApiException {
        String clusterId = null;
        List<Ingress> body = null;
        List<Ingress> response = api.apiClustersMgmtV1ClustersClusterIdIngressesPatch(clusterId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Adds a new ingress to the cluster. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdIngressesPostTest() throws ApiException {
        String clusterId = null;
        Ingress body = null;
        Ingress response = api.apiClustersMgmtV1ClustersClusterIdIngressesPost(clusterId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the list of log links. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdLogsGetTest() throws ApiException {
        String clusterId = null;
        Integer page = null;
        Integer size = null;
        InlineResponse20014 response = api.apiClustersMgmtV1ClustersClusterIdLogsGet(clusterId, page, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the log. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdLogsInstallGetTest() throws ApiException {
        String clusterId = null;
        Integer offset = null;
        Integer tail = null;
        Log response = api.apiClustersMgmtV1ClustersClusterIdLogsInstallGet(clusterId, offset, tail);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the log. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdLogsUninstallGetTest() throws ApiException {
        String clusterId = null;
        Integer offset = null;
        Integer tail = null;
        Log response = api.apiClustersMgmtV1ClustersClusterIdLogsUninstallGet(clusterId, offset, tail);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the list of machine pools. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdMachinePoolsGetTest() throws ApiException {
        String clusterId = null;
        Integer page = null;
        Integer size = null;
        InlineResponse20015 response = api.apiClustersMgmtV1ClustersClusterIdMachinePoolsGet(clusterId, page, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes the machine pool. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdMachinePoolsMachinePoolIdDeleteTest() throws ApiException {
        String clusterId = null;
        String machinePoolId = null;
        api.apiClustersMgmtV1ClustersClusterIdMachinePoolsMachinePoolIdDelete(clusterId, machinePoolId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the machine pool. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdMachinePoolsMachinePoolIdGetTest() throws ApiException {
        String clusterId = null;
        String machinePoolId = null;
        MachinePool response = api.apiClustersMgmtV1ClustersClusterIdMachinePoolsMachinePoolIdGet(clusterId, machinePoolId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Updates the machine pool. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdMachinePoolsMachinePoolIdPatchTest() throws ApiException {
        String clusterId = null;
        String machinePoolId = null;
        MachinePool body = null;
        MachinePool response = api.apiClustersMgmtV1ClustersClusterIdMachinePoolsMachinePoolIdPatch(clusterId, machinePoolId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Adds a new machine pool to the cluster. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdMachinePoolsPostTest() throws ApiException {
        String clusterId = null;
        MachinePool body = null;
        MachinePool response = api.apiClustersMgmtV1ClustersClusterIdMachinePoolsPost(clusterId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdMetricQueriesAlertsGetTest() throws ApiException {
        String clusterId = null;
        AlertsInfo response = api.apiClustersMgmtV1ClustersClusterIdMetricQueriesAlertsGet(clusterId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdMetricQueriesClusterOperatorsGetTest() throws ApiException {
        String clusterId = null;
        ClusterOperatorsInfo response = api.apiClustersMgmtV1ClustersClusterIdMetricQueriesClusterOperatorsGet(clusterId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the metrics. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdMetricQueriesCpuTotalByNodeRolesOsGetTest() throws ApiException {
        String clusterId = null;
        CPUTotalsNodeRoleOSMetricNode response = api.apiClustersMgmtV1ClustersClusterIdMetricQueriesCpuTotalByNodeRolesOsGet(clusterId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdMetricQueriesNodesGetTest() throws ApiException {
        String clusterId = null;
        NodesInfo response = api.apiClustersMgmtV1ClustersClusterIdMetricQueriesNodesGet(clusterId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the metrics. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdMetricQueriesSocketTotalByNodeRolesOsGetTest() throws ApiException {
        String clusterId = null;
        SocketTotalsNodeRoleOSMetricNode response = api.apiClustersMgmtV1ClustersClusterIdMetricQueriesSocketTotalByNodeRolesOsGet(clusterId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Updates the cluster. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdPatchTest() throws ApiException {
        String clusterId = null;
        Cluster body = null;
        Cluster response = api.apiClustersMgmtV1ClustersClusterIdPatch(clusterId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the product. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdProductGetTest() throws ApiException {
        String clusterId = null;
        Product response = api.apiClustersMgmtV1ClustersClusterIdProductGet(clusterId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the provision shard. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdProvisionShardGetTest() throws ApiException {
        String clusterId = null;
        ProvisionShard response = api.apiClustersMgmtV1ClustersClusterIdProvisionShardGet(clusterId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdStatusGetTest() throws ApiException {
        String clusterId = null;
        ClusterStatus response = api.apiClustersMgmtV1ClustersClusterIdStatusGet(clusterId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the list of upgrade policies. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdUpgradePoliciesGetTest() throws ApiException {
        String clusterId = null;
        Integer page = null;
        Integer size = null;
        InlineResponse20016 response = api.apiClustersMgmtV1ClustersClusterIdUpgradePoliciesGet(clusterId, page, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Adds a new upgrade policy to the cluster. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdUpgradePoliciesPostTest() throws ApiException {
        String clusterId = null;
        UpgradePolicy body = null;
        UpgradePolicy response = api.apiClustersMgmtV1ClustersClusterIdUpgradePoliciesPost(clusterId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes the upgrade policy. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdUpgradePoliciesUpgradePolicyIdDeleteTest() throws ApiException {
        String clusterId = null;
        String upgradePolicyId = null;
        api.apiClustersMgmtV1ClustersClusterIdUpgradePoliciesUpgradePolicyIdDelete(clusterId, upgradePolicyId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the upgrade policy. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdUpgradePoliciesUpgradePolicyIdGetTest() throws ApiException {
        String clusterId = null;
        String upgradePolicyId = null;
        UpgradePolicy response = api.apiClustersMgmtV1ClustersClusterIdUpgradePoliciesUpgradePolicyIdGet(clusterId, upgradePolicyId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Update the upgrade policy. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdUpgradePoliciesUpgradePolicyIdPatchTest() throws ApiException {
        String clusterId = null;
        String upgradePolicyId = null;
        UpgradePolicy body = null;
        UpgradePolicy response = api.apiClustersMgmtV1ClustersClusterIdUpgradePoliciesUpgradePolicyIdPatch(clusterId, upgradePolicyId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the upgrade policy state. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdUpgradePoliciesUpgradePolicyIdStateGetTest() throws ApiException {
        String clusterId = null;
        String upgradePolicyId = null;
        UpgradePolicyState response = api.apiClustersMgmtV1ClustersClusterIdUpgradePoliciesUpgradePolicyIdStateGet(clusterId, upgradePolicyId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Update the upgrade policy state. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersClusterIdUpgradePoliciesUpgradePolicyIdStatePatchTest() throws ApiException {
        String clusterId = null;
        String upgradePolicyId = null;
        UpgradePolicyState body = null;
        UpgradePolicyState response = api.apiClustersMgmtV1ClustersClusterIdUpgradePoliciesUpgradePolicyIdStatePatch(clusterId, upgradePolicyId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the list of clusters. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersGetTest() throws ApiException {
        String order = null;
        Integer page = null;
        String search = null;
        Integer size = null;
        InlineResponse2005 response = api.apiClustersMgmtV1ClustersGet(order, page, search, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Provision a new cluster and add it to the collection of clusters.  See the &#x60;register_cluster&#x60; method for adding an existing cluster. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ClustersPostTest() throws ApiException {
        Cluster body = null;
        Cluster response = api.apiClustersMgmtV1ClustersPost(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the dashboard. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1DashboardsDashboardIdGetTest() throws ApiException {
        String dashboardId = null;
        Dashboard response = api.apiClustersMgmtV1DashboardsDashboardIdGet(dashboardId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves a list of dashboards. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1DashboardsGetTest() throws ApiException {
        String order = null;
        Integer page = null;
        String search = null;
        Integer size = null;
        InlineResponse20017 response = api.apiClustersMgmtV1DashboardsGet(order, page, search, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the cluster flavour. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1FlavoursFlavourIdGetTest() throws ApiException {
        String flavourId = null;
        Flavour response = api.apiClustersMgmtV1FlavoursFlavourIdGet(flavourId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Updates the flavour.  Attributes that can be updated are:  - &#x60;aws.infra_volume&#x60; - &#x60;aws.infra_instance_type&#x60; - &#x60;gcp.infra_instance_type&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1FlavoursFlavourIdPatchTest() throws ApiException {
        String flavourId = null;
        Flavour body = null;
        Flavour response = api.apiClustersMgmtV1FlavoursFlavourIdPatch(flavourId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1FlavoursGetTest() throws ApiException {
        String order = null;
        Integer page = null;
        String search = null;
        Integer size = null;
        InlineResponse20018 response = api.apiClustersMgmtV1FlavoursGet(order, page, search, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Adds a new cluster flavour. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1FlavoursPostTest() throws ApiException {
        Flavour body = null;
        Flavour response = api.apiClustersMgmtV1FlavoursPost(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the version metadata. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1GetTest() throws ApiException {
        Metadata response = api.apiClustersMgmtV1Get();

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the list of machine types. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1MachineTypesGetTest() throws ApiException {
        String order = null;
        Integer page = null;
        String search = null;
        Integer size = null;
        InlineResponse20019 response = api.apiClustersMgmtV1MachineTypesGet(order, page, search, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the list of products. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ProductsGetTest() throws ApiException {
        String order = null;
        Integer page = null;
        String search = null;
        Integer size = null;
        InlineResponse20020 response = api.apiClustersMgmtV1ProductsGet(order, page, search, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the product. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ProductsProductIdGetTest() throws ApiException {
        String productId = null;
        Product response = api.apiClustersMgmtV1ProductsProductIdGet(productId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ProvisionShardsGetTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        InlineResponse20021 response = api.apiClustersMgmtV1ProvisionShardsGet(page, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the provision shard. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1ProvisionShardsProvisionShardIdGetTest() throws ApiException {
        String provisionShardId = null;
        ProvisionShard response = api.apiClustersMgmtV1ProvisionShardsProvisionShardIdGet(provisionShardId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves a list of versions. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1VersionsGetTest() throws ApiException {
        String order = null;
        Integer page = null;
        String search = null;
        Integer size = null;
        InlineResponse20022 response = api.apiClustersMgmtV1VersionsGet(order, page, search, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the version. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiClustersMgmtV1VersionsVersionIdGetTest() throws ApiException {
        String versionId = null;
        Version response = api.apiClustersMgmtV1VersionsVersionIdGet(versionId);

        // TODO: test validations
    }
}
