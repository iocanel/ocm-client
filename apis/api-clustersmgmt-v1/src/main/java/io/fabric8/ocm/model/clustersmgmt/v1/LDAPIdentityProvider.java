/*
 * clusters_mgmt
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: ocm-feedback@redhat.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.fabric8.ocm.model.clustersmgmt.v1;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.fabric8.ocm.model.clustersmgmt.v1.LDAPAttributes;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Details for &#x60;ldap&#x60; identity providers. 
 */
@Schema(description = "Details for `ldap` identity providers. ")

public class LDAPIdentityProvider {
  @JsonProperty("ca")
  private String ca = null;

  @JsonProperty("url")
  private String url = null;

  @JsonProperty("attributes")
  private LDAPAttributes attributes = null;

  @JsonProperty("bind_dn")
  private String bindDn = null;

  @JsonProperty("bind_password")
  private String bindPassword = null;

  @JsonProperty("insecure")
  private Boolean insecure = null;

  public LDAPIdentityProvider ca(String ca) {
    this.ca = ca;
    return this;
  }

   /**
   * Certificate bundle to use to validate server certificates for the configured URL. 
   * @return ca
  **/
  @Schema(description = "Certificate bundle to use to validate server certificates for the configured URL. ")
  public String getCa() {
    return ca;
  }

  public void setCa(String ca) {
    this.ca = ca;
  }

  public LDAPIdentityProvider url(String url) {
    this.url = url;
    return this;
  }

   /**
   * An https://tools.ietf.org/html/rfc2255[RFC 2255] URL which specifies the LDAP host and search parameters to use. 
   * @return url
  **/
  @Schema(description = "An https://tools.ietf.org/html/rfc2255[RFC 2255] URL which specifies the LDAP host and search parameters to use. ")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public LDAPIdentityProvider attributes(LDAPAttributes attributes) {
    this.attributes = attributes;
    return this;
  }

   /**
   * Get attributes
   * @return attributes
  **/
  @Schema(description = "")
  public LDAPAttributes getAttributes() {
    return attributes;
  }

  public void setAttributes(LDAPAttributes attributes) {
    this.attributes = attributes;
  }

  public LDAPIdentityProvider bindDn(String bindDn) {
    this.bindDn = bindDn;
    return this;
  }

   /**
   * Optional distinguished name to use to bind during the search phase. 
   * @return bindDn
  **/
  @Schema(description = "Optional distinguished name to use to bind during the search phase. ")
  public String getBindDn() {
    return bindDn;
  }

  public void setBindDn(String bindDn) {
    this.bindDn = bindDn;
  }

  public LDAPIdentityProvider bindPassword(String bindPassword) {
    this.bindPassword = bindPassword;
    return this;
  }

   /**
   * Optional password to use to bind during the search phase. 
   * @return bindPassword
  **/
  @Schema(description = "Optional password to use to bind during the search phase. ")
  public String getBindPassword() {
    return bindPassword;
  }

  public void setBindPassword(String bindPassword) {
    this.bindPassword = bindPassword;
  }

  public LDAPIdentityProvider insecure(Boolean insecure) {
    this.insecure = insecure;
    return this;
  }

   /**
   * When &#x60;true&#x60; no TLS connection is made to the server. When &#x60;false&#x60; &#x60;ldaps://...&#x60; URLs connect using TLS and &#x60;ldap://...&#x60; are upgraded to TLS. 
   * @return insecure
  **/
  @Schema(description = "When `true` no TLS connection is made to the server. When `false` `ldaps://...` URLs connect using TLS and `ldap://...` are upgraded to TLS. ")
  public Boolean isInsecure() {
    return insecure;
  }

  public void setInsecure(Boolean insecure) {
    this.insecure = insecure;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LDAPIdentityProvider ldAPIdentityProvider = (LDAPIdentityProvider) o;
    return Objects.equals(this.ca, ldAPIdentityProvider.ca) &&
        Objects.equals(this.url, ldAPIdentityProvider.url) &&
        Objects.equals(this.attributes, ldAPIdentityProvider.attributes) &&
        Objects.equals(this.bindDn, ldAPIdentityProvider.bindDn) &&
        Objects.equals(this.bindPassword, ldAPIdentityProvider.bindPassword) &&
        Objects.equals(this.insecure, ldAPIdentityProvider.insecure);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ca, url, attributes, bindDn, bindPassword, insecure);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LDAPIdentityProvider {\n");
    
    sb.append("    ca: ").append(toIndentedString(ca)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    bindDn: ").append(toIndentedString(bindDn)).append("\n");
    sb.append("    bindPassword: ").append(toIndentedString(bindPassword)).append("\n");
    sb.append("    insecure: ").append(toIndentedString(insecure)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
