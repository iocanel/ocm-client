/*
 * clusters_mgmt
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: ocm-feedback@redhat.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.fabric8.ocm.model.clustersmgmt.v1;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.fabric8.ocm.model.clustersmgmt.v1.OpenIDClaims;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * Details for &#x60;openid&#x60; identity providers. 
 */
@Schema(description = "Details for `openid` identity providers. ")

public class OpenIDIdentityProvider {
  @JsonProperty("ca")
  private String ca = null;

  @JsonProperty("claims")
  private OpenIDClaims claims = null;

  @JsonProperty("client_id")
  private String clientId = null;

  @JsonProperty("client_secret")
  private String clientSecret = null;

  @JsonProperty("extra_authorize_parameters")
  private Map<String, String> extraAuthorizeParameters = null;

  @JsonProperty("extra_scopes")
  private List<String> extraScopes = null;

  @JsonProperty("issuer")
  private String issuer = null;

  public OpenIDIdentityProvider ca(String ca) {
    this.ca = ca;
    return this;
  }

   /**
   * Certificate bunde to use to validate server certificates for the configured URL. 
   * @return ca
  **/
  @Schema(description = "Certificate bunde to use to validate server certificates for the configured URL. ")
  public String getCa() {
    return ca;
  }

  public void setCa(String ca) {
    this.ca = ca;
  }

  public OpenIDIdentityProvider claims(OpenIDClaims claims) {
    this.claims = claims;
    return this;
  }

   /**
   * Get claims
   * @return claims
  **/
  @Schema(description = "")
  public OpenIDClaims getClaims() {
    return claims;
  }

  public void setClaims(OpenIDClaims claims) {
    this.claims = claims;
  }

  public OpenIDIdentityProvider clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

   /**
   * Identifier of a client registered with the _OpenID_ provider. 
   * @return clientId
  **/
  @Schema(description = "Identifier of a client registered with the _OpenID_ provider. ")
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }

  public OpenIDIdentityProvider clientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
    return this;
  }

   /**
   * Client secret. 
   * @return clientSecret
  **/
  @Schema(description = "Client secret. ")
  public String getClientSecret() {
    return clientSecret;
  }

  public void setClientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
  }

  public OpenIDIdentityProvider extraAuthorizeParameters(Map<String, String> extraAuthorizeParameters) {
    this.extraAuthorizeParameters = extraAuthorizeParameters;
    return this;
  }

  public OpenIDIdentityProvider putExtraAuthorizeParametersItem(String key, String extraAuthorizeParametersItem) {
    if (this.extraAuthorizeParameters == null) {
      this.extraAuthorizeParameters = new HashMap<>();
    }
    this.extraAuthorizeParameters.put(key, extraAuthorizeParametersItem);
    return this;
  }

   /**
   * Optional map of extra parameters to add to the authorization token request. 
   * @return extraAuthorizeParameters
  **/
  @Schema(description = "Optional map of extra parameters to add to the authorization token request. ")
  public Map<String, String> getExtraAuthorizeParameters() {
    return extraAuthorizeParameters;
  }

  public void setExtraAuthorizeParameters(Map<String, String> extraAuthorizeParameters) {
    this.extraAuthorizeParameters = extraAuthorizeParameters;
  }

  public OpenIDIdentityProvider extraScopes(List<String> extraScopes) {
    this.extraScopes = extraScopes;
    return this;
  }

  public OpenIDIdentityProvider addExtraScopesItem(String extraScopesItem) {
    if (this.extraScopes == null) {
      this.extraScopes = new ArrayList<>();
    }
    this.extraScopes.add(extraScopesItem);
    return this;
  }

   /**
   * Optional list of scopes to request, in addition to the &#x60;openid&#x60; scope, during the authorization token request. 
   * @return extraScopes
  **/
  @Schema(description = "Optional list of scopes to request, in addition to the `openid` scope, during the authorization token request. ")
  public List<String> getExtraScopes() {
    return extraScopes;
  }

  public void setExtraScopes(List<String> extraScopes) {
    this.extraScopes = extraScopes;
  }

  public OpenIDIdentityProvider issuer(String issuer) {
    this.issuer = issuer;
    return this;
  }

   /**
   * The URL that the OpenID Provider asserts as the Issuer Identifier 
   * @return issuer
  **/
  @Schema(description = "The URL that the OpenID Provider asserts as the Issuer Identifier ")
  public String getIssuer() {
    return issuer;
  }

  public void setIssuer(String issuer) {
    this.issuer = issuer;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OpenIDIdentityProvider openIDIdentityProvider = (OpenIDIdentityProvider) o;
    return Objects.equals(this.ca, openIDIdentityProvider.ca) &&
        Objects.equals(this.claims, openIDIdentityProvider.claims) &&
        Objects.equals(this.clientId, openIDIdentityProvider.clientId) &&
        Objects.equals(this.clientSecret, openIDIdentityProvider.clientSecret) &&
        Objects.equals(this.extraAuthorizeParameters, openIDIdentityProvider.extraAuthorizeParameters) &&
        Objects.equals(this.extraScopes, openIDIdentityProvider.extraScopes) &&
        Objects.equals(this.issuer, openIDIdentityProvider.issuer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ca, claims, clientId, clientSecret, extraAuthorizeParameters, extraScopes, issuer);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OpenIDIdentityProvider {\n");
    
    sb.append("    ca: ").append(toIndentedString(ca)).append("\n");
    sb.append("    claims: ").append(toIndentedString(claims)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    extraAuthorizeParameters: ").append(toIndentedString(extraAuthorizeParameters)).append("\n");
    sb.append("    extraScopes: ").append(toIndentedString(extraScopes)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
