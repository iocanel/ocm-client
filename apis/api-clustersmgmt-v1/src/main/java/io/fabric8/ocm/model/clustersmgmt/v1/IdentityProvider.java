/*
 * clusters_mgmt
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: ocm-feedback@redhat.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.fabric8.ocm.model.clustersmgmt.v1;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.fabric8.ocm.model.clustersmgmt.v1.GithubIdentityProvider;
import io.fabric8.ocm.model.clustersmgmt.v1.GitlabIdentityProvider;
import io.fabric8.ocm.model.clustersmgmt.v1.GoogleIdentityProvider;
import io.fabric8.ocm.model.clustersmgmt.v1.HTPasswdIdentityProvider;
import io.fabric8.ocm.model.clustersmgmt.v1.IdentityProviderMappingMethod;
import io.fabric8.ocm.model.clustersmgmt.v1.IdentityProviderType;
import io.fabric8.ocm.model.clustersmgmt.v1.LDAPIdentityProvider;
import io.fabric8.ocm.model.clustersmgmt.v1.OpenIDIdentityProvider;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Representation of an identity provider. 
 */
@Schema(description = "Representation of an identity provider. ")

public class IdentityProvider {
  @JsonProperty("kind")
  private String kind = null;

  @JsonProperty("id")
  private String id = null;

  @JsonProperty("href")
  private String href = null;

  @JsonProperty("ldap")
  private LDAPIdentityProvider ldap = null;

  @JsonProperty("challenge")
  private Boolean challenge = null;

  @JsonProperty("github")
  private GithubIdentityProvider github = null;

  @JsonProperty("gitlab")
  private GitlabIdentityProvider gitlab = null;

  @JsonProperty("google")
  private GoogleIdentityProvider google = null;

  @JsonProperty("htpasswd")
  private HTPasswdIdentityProvider htpasswd = null;

  @JsonProperty("login")
  private Boolean login = null;

  @JsonProperty("mapping_method")
  private IdentityProviderMappingMethod mappingMethod = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("open_id")
  private OpenIDIdentityProvider openId = null;

  @JsonProperty("type")
  private IdentityProviderType type = null;

  public IdentityProvider kind(String kind) {
    this.kind = kind;
    return this;
  }

   /**
   * Indicates the type of this object. Will be &#x27;IdentityProvider&#x27; if this is a complete object or &#x27;IdentityProviderLink&#x27; if it is just a link. 
   * @return kind
  **/
  @Schema(description = "Indicates the type of this object. Will be 'IdentityProvider' if this is a complete object or 'IdentityProviderLink' if it is just a link. ")
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }

  public IdentityProvider id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Unique identifier of the object. 
   * @return id
  **/
  @Schema(description = "Unique identifier of the object. ")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public IdentityProvider href(String href) {
    this.href = href;
    return this;
  }

   /**
   * Self link. 
   * @return href
  **/
  @Schema(description = "Self link. ")
  public String getHref() {
    return href;
  }

  public void setHref(String href) {
    this.href = href;
  }

  public IdentityProvider ldap(LDAPIdentityProvider ldap) {
    this.ldap = ldap;
    return this;
  }

   /**
   * Get ldap
   * @return ldap
  **/
  @Schema(description = "")
  public LDAPIdentityProvider getLdap() {
    return ldap;
  }

  public void setLdap(LDAPIdentityProvider ldap) {
    this.ldap = ldap;
  }

  public IdentityProvider challenge(Boolean challenge) {
    this.challenge = challenge;
    return this;
  }

   /**
   * When &#x60;true&#x60; unauthenticated token requests from non-web clients (like the CLI) are sent a &#x60;WWW-Authenticate&#x60; challenge header for this provider. 
   * @return challenge
  **/
  @Schema(description = "When `true` unauthenticated token requests from non-web clients (like the CLI) are sent a `WWW-Authenticate` challenge header for this provider. ")
  public Boolean isChallenge() {
    return challenge;
  }

  public void setChallenge(Boolean challenge) {
    this.challenge = challenge;
  }

  public IdentityProvider github(GithubIdentityProvider github) {
    this.github = github;
    return this;
  }

   /**
   * Get github
   * @return github
  **/
  @Schema(description = "")
  public GithubIdentityProvider getGithub() {
    return github;
  }

  public void setGithub(GithubIdentityProvider github) {
    this.github = github;
  }

  public IdentityProvider gitlab(GitlabIdentityProvider gitlab) {
    this.gitlab = gitlab;
    return this;
  }

   /**
   * Get gitlab
   * @return gitlab
  **/
  @Schema(description = "")
  public GitlabIdentityProvider getGitlab() {
    return gitlab;
  }

  public void setGitlab(GitlabIdentityProvider gitlab) {
    this.gitlab = gitlab;
  }

  public IdentityProvider google(GoogleIdentityProvider google) {
    this.google = google;
    return this;
  }

   /**
   * Get google
   * @return google
  **/
  @Schema(description = "")
  public GoogleIdentityProvider getGoogle() {
    return google;
  }

  public void setGoogle(GoogleIdentityProvider google) {
    this.google = google;
  }

  public IdentityProvider htpasswd(HTPasswdIdentityProvider htpasswd) {
    this.htpasswd = htpasswd;
    return this;
  }

   /**
   * Get htpasswd
   * @return htpasswd
  **/
  @Schema(description = "")
  public HTPasswdIdentityProvider getHtpasswd() {
    return htpasswd;
  }

  public void setHtpasswd(HTPasswdIdentityProvider htpasswd) {
    this.htpasswd = htpasswd;
  }

  public IdentityProvider login(Boolean login) {
    this.login = login;
    return this;
  }

   /**
   * When &#x60;true&#x60; unauthenticated token requests from web clients (like the web console) are redirected to the authorize URL to log in. 
   * @return login
  **/
  @Schema(description = "When `true` unauthenticated token requests from web clients (like the web console) are redirected to the authorize URL to log in. ")
  public Boolean isLogin() {
    return login;
  }

  public void setLogin(Boolean login) {
    this.login = login;
  }

  public IdentityProvider mappingMethod(IdentityProviderMappingMethod mappingMethod) {
    this.mappingMethod = mappingMethod;
    return this;
  }

   /**
   * Get mappingMethod
   * @return mappingMethod
  **/
  @Schema(description = "")
  public IdentityProviderMappingMethod getMappingMethod() {
    return mappingMethod;
  }

  public void setMappingMethod(IdentityProviderMappingMethod mappingMethod) {
    this.mappingMethod = mappingMethod;
  }

  public IdentityProvider name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the identity provider. 
   * @return name
  **/
  @Schema(description = "The name of the identity provider. ")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public IdentityProvider openId(OpenIDIdentityProvider openId) {
    this.openId = openId;
    return this;
  }

   /**
   * Get openId
   * @return openId
  **/
  @Schema(description = "")
  public OpenIDIdentityProvider getOpenId() {
    return openId;
  }

  public void setOpenId(OpenIDIdentityProvider openId) {
    this.openId = openId;
  }

  public IdentityProvider type(IdentityProviderType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public IdentityProviderType getType() {
    return type;
  }

  public void setType(IdentityProviderType type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdentityProvider identityProvider = (IdentityProvider) o;
    return Objects.equals(this.kind, identityProvider.kind) &&
        Objects.equals(this.id, identityProvider.id) &&
        Objects.equals(this.href, identityProvider.href) &&
        Objects.equals(this.ldap, identityProvider.ldap) &&
        Objects.equals(this.challenge, identityProvider.challenge) &&
        Objects.equals(this.github, identityProvider.github) &&
        Objects.equals(this.gitlab, identityProvider.gitlab) &&
        Objects.equals(this.google, identityProvider.google) &&
        Objects.equals(this.htpasswd, identityProvider.htpasswd) &&
        Objects.equals(this.login, identityProvider.login) &&
        Objects.equals(this.mappingMethod, identityProvider.mappingMethod) &&
        Objects.equals(this.name, identityProvider.name) &&
        Objects.equals(this.openId, identityProvider.openId) &&
        Objects.equals(this.type, identityProvider.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(kind, id, href, ldap, challenge, github, gitlab, google, htpasswd, login, mappingMethod, name, openId, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdentityProvider {\n");
    
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    ldap: ").append(toIndentedString(ldap)).append("\n");
    sb.append("    challenge: ").append(toIndentedString(challenge)).append("\n");
    sb.append("    github: ").append(toIndentedString(github)).append("\n");
    sb.append("    gitlab: ").append(toIndentedString(gitlab)).append("\n");
    sb.append("    google: ").append(toIndentedString(google)).append("\n");
    sb.append("    htpasswd: ").append(toIndentedString(htpasswd)).append("\n");
    sb.append("    login: ").append(toIndentedString(login)).append("\n");
    sb.append("    mappingMethod: ").append(toIndentedString(mappingMethod)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    openId: ").append(toIndentedString(openId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
