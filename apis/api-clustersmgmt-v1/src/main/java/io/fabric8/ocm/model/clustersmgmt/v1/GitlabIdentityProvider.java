/*
 * clusters_mgmt
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: ocm-feedback@redhat.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.fabric8.ocm.model.clustersmgmt.v1;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Details for &#x60;gitlab&#x60; identity providers. 
 */
@Schema(description = "Details for `gitlab` identity providers. ")

public class GitlabIdentityProvider {
  @JsonProperty("ca")
  private String ca = null;

  @JsonProperty("url")
  private String url = null;

  @JsonProperty("client_id")
  private String clientId = null;

  @JsonProperty("client_secret")
  private String clientSecret = null;

  public GitlabIdentityProvider ca(String ca) {
    this.ca = ca;
    return this;
  }

   /**
   * Optional trusted certificate authority bundle to use when making requests tot he server. 
   * @return ca
  **/
  @Schema(description = "Optional trusted certificate authority bundle to use when making requests tot he server. ")
  public String getCa() {
    return ca;
  }

  public void setCa(String ca) {
    this.ca = ca;
  }

  public GitlabIdentityProvider url(String url) {
    this.url = url;
    return this;
  }

   /**
   * URL of the _GitLab_ instance. 
   * @return url
  **/
  @Schema(description = "URL of the _GitLab_ instance. ")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public GitlabIdentityProvider clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

   /**
   * Client identifier of a registered _GitLab_ OAuth application. 
   * @return clientId
  **/
  @Schema(description = "Client identifier of a registered _GitLab_ OAuth application. ")
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }

  public GitlabIdentityProvider clientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
    return this;
  }

   /**
   * Client secret issued by _GitLab_. 
   * @return clientSecret
  **/
  @Schema(description = "Client secret issued by _GitLab_. ")
  public String getClientSecret() {
    return clientSecret;
  }

  public void setClientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GitlabIdentityProvider gitlabIdentityProvider = (GitlabIdentityProvider) o;
    return Objects.equals(this.ca, gitlabIdentityProvider.ca) &&
        Objects.equals(this.url, gitlabIdentityProvider.url) &&
        Objects.equals(this.clientId, gitlabIdentityProvider.clientId) &&
        Objects.equals(this.clientSecret, gitlabIdentityProvider.clientSecret);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ca, url, clientId, clientSecret);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GitlabIdentityProvider {\n");
    
    sb.append("    ca: ").append(toIndentedString(ca)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
