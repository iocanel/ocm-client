/*
 * clusters_mgmt
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: ocm-feedback@redhat.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.fabric8.ocm.model.clustersmgmt.v1;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Specification for different classes of nodes inside a flavour. 
 */
@Schema(description = "Specification for different classes of nodes inside a flavour. ")

public class GCPFlavour {
  @JsonProperty("compute_instance_type")
  private String computeInstanceType = null;

  @JsonProperty("infra_instance_type")
  private String infraInstanceType = null;

  @JsonProperty("master_instance_type")
  private String masterInstanceType = null;

  public GCPFlavour computeInstanceType(String computeInstanceType) {
    this.computeInstanceType = computeInstanceType;
    return this;
  }

   /**
   * GCP default instance type for the worker volume.  User can be overridden specifying in the cluster itself a type for compute node. 
   * @return computeInstanceType
  **/
  @Schema(description = "GCP default instance type for the worker volume.  User can be overridden specifying in the cluster itself a type for compute node. ")
  public String getComputeInstanceType() {
    return computeInstanceType;
  }

  public void setComputeInstanceType(String computeInstanceType) {
    this.computeInstanceType = computeInstanceType;
  }

  public GCPFlavour infraInstanceType(String infraInstanceType) {
    this.infraInstanceType = infraInstanceType;
    return this;
  }

   /**
   * GCP default instance type for the infra volume. 
   * @return infraInstanceType
  **/
  @Schema(description = "GCP default instance type for the infra volume. ")
  public String getInfraInstanceType() {
    return infraInstanceType;
  }

  public void setInfraInstanceType(String infraInstanceType) {
    this.infraInstanceType = infraInstanceType;
  }

  public GCPFlavour masterInstanceType(String masterInstanceType) {
    this.masterInstanceType = masterInstanceType;
    return this;
  }

   /**
   * GCP default instance type for the master volume. 
   * @return masterInstanceType
  **/
  @Schema(description = "GCP default instance type for the master volume. ")
  public String getMasterInstanceType() {
    return masterInstanceType;
  }

  public void setMasterInstanceType(String masterInstanceType) {
    this.masterInstanceType = masterInstanceType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GCPFlavour gcPFlavour = (GCPFlavour) o;
    return Objects.equals(this.computeInstanceType, gcPFlavour.computeInstanceType) &&
        Objects.equals(this.infraInstanceType, gcPFlavour.infraInstanceType) &&
        Objects.equals(this.masterInstanceType, gcPFlavour.masterInstanceType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(computeInstanceType, infraInstanceType, masterInstanceType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GCPFlavour {\n");
    
    sb.append("    computeInstanceType: ").append(toIndentedString(computeInstanceType)).append("\n");
    sb.append("    infraInstanceType: ").append(toIndentedString(infraInstanceType)).append("\n");
    sb.append("    masterInstanceType: ").append(toIndentedString(masterInstanceType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
