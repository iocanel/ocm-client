/*
 * clusters_mgmt
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: ocm-feedback@redhat.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.fabric8.ocm.model.clustersmgmt.v1;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.fabric8.ocm.model.clustersmgmt.v1.ClusterOperatorState;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.LocalDateTime;
/**
 * ClusterOperatorInfo
 */


public class ClusterOperatorInfo {
  @JsonProperty("condition")
  private ClusterOperatorState condition = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("reason")
  private String reason = null;

  @JsonProperty("time")
  private LocalDateTime time = null;

  @JsonProperty("version")
  private String version = null;

  public ClusterOperatorInfo condition(ClusterOperatorState condition) {
    this.condition = condition;
    return this;
  }

   /**
   * Get condition
   * @return condition
  **/
  @Schema(description = "")
  public ClusterOperatorState getCondition() {
    return condition;
  }

  public void setCondition(ClusterOperatorState condition) {
    this.condition = condition;
  }

  public ClusterOperatorInfo name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the operator. 
   * @return name
  **/
  @Schema(description = "Name of the operator. ")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ClusterOperatorInfo reason(String reason) {
    this.reason = reason;
    return this;
  }

   /**
   * Extra detail on condition, if available.  Empty string if unknown. 
   * @return reason
  **/
  @Schema(description = "Extra detail on condition, if available.  Empty string if unknown. ")
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }

  public ClusterOperatorInfo time(LocalDateTime time) {
    this.time = time;
    return this;
  }

   /**
   * Time when the sample was obtained, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format. 
   * @return time
  **/
  @Schema(description = "Time when the sample was obtained, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format. ")
  public LocalDateTime getTime() {
    return time;
  }

  public void setTime(LocalDateTime time) {
    this.time = time;
  }

  public ClusterOperatorInfo version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Current version of the operator.  Empty string if unknown. 
   * @return version
  **/
  @Schema(description = "Current version of the operator.  Empty string if unknown. ")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClusterOperatorInfo clusterOperatorInfo = (ClusterOperatorInfo) o;
    return Objects.equals(this.condition, clusterOperatorInfo.condition) &&
        Objects.equals(this.name, clusterOperatorInfo.name) &&
        Objects.equals(this.reason, clusterOperatorInfo.reason) &&
        Objects.equals(this.time, clusterOperatorInfo.time) &&
        Objects.equals(this.version, clusterOperatorInfo.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(condition, name, reason, time, version);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClusterOperatorInfo {\n");
    
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
