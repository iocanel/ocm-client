/*
 * accounts_mgmt
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: ocm-feedback@redhat.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.fabric8.ocm.api.accountsmgmt.v1;

import io.fabric8.ocm.api.accountsmgmt.ApiException;
import io.fabric8.ocm.model.accountsmgmt.v1.AccessToken;
import io.fabric8.ocm.model.accountsmgmt.v1.Account;
import io.fabric8.ocm.model.accountsmgmt.v1.ClusterAuthorizationRequest;
import io.fabric8.ocm.model.accountsmgmt.v1.ClusterAuthorizationResponse;
import io.fabric8.ocm.model.accountsmgmt.v1.ClusterRegistrationRequest;
import io.fabric8.ocm.model.accountsmgmt.v1.ClusterRegistrationResponse;
import io.fabric8.ocm.model.accountsmgmt.v1.Error;
import io.fabric8.ocm.model.accountsmgmt.v1.FeatureToggle;
import io.fabric8.ocm.model.accountsmgmt.v1.FeatureToggleQueryRequest;
import io.fabric8.ocm.model.accountsmgmt.v1.InlineResponse200;
import io.fabric8.ocm.model.accountsmgmt.v1.InlineResponse2001;
import io.fabric8.ocm.model.accountsmgmt.v1.InlineResponse20010;
import io.fabric8.ocm.model.accountsmgmt.v1.InlineResponse20011;
import io.fabric8.ocm.model.accountsmgmt.v1.InlineResponse20012;
import io.fabric8.ocm.model.accountsmgmt.v1.InlineResponse20013;
import io.fabric8.ocm.model.accountsmgmt.v1.InlineResponse20014;
import io.fabric8.ocm.model.accountsmgmt.v1.InlineResponse2002;
import io.fabric8.ocm.model.accountsmgmt.v1.InlineResponse2003;
import io.fabric8.ocm.model.accountsmgmt.v1.InlineResponse2004;
import io.fabric8.ocm.model.accountsmgmt.v1.InlineResponse2005;
import io.fabric8.ocm.model.accountsmgmt.v1.InlineResponse2006;
import io.fabric8.ocm.model.accountsmgmt.v1.InlineResponse2007;
import io.fabric8.ocm.model.accountsmgmt.v1.InlineResponse2008;
import io.fabric8.ocm.model.accountsmgmt.v1.InlineResponse2009;
import io.fabric8.ocm.model.accountsmgmt.v1.Label;
import io.fabric8.ocm.model.accountsmgmt.v1.Metadata;
import io.fabric8.ocm.model.accountsmgmt.v1.Organization;
import io.fabric8.ocm.model.accountsmgmt.v1.Permission;
import io.fabric8.ocm.model.accountsmgmt.v1.PullSecretsRequest;
import io.fabric8.ocm.model.accountsmgmt.v1.Registry;
import io.fabric8.ocm.model.accountsmgmt.v1.RegistryCredential;
import io.fabric8.ocm.model.accountsmgmt.v1.ReservedResource;
import io.fabric8.ocm.model.accountsmgmt.v1.ResourceQuota;
import io.fabric8.ocm.model.accountsmgmt.v1.Role;
import io.fabric8.ocm.model.accountsmgmt.v1.RoleBinding;
import io.fabric8.ocm.model.accountsmgmt.v1.SKU;
import io.fabric8.ocm.model.accountsmgmt.v1.SkuRule;
import io.fabric8.ocm.model.accountsmgmt.v1.Subscription;
import io.fabric8.ocm.model.accountsmgmt.v1.SubscriptionNotify;
import io.fabric8.ocm.model.accountsmgmt.v1.SubscriptionRegistration;
import io.fabric8.ocm.model.accountsmgmt.v1.SummaryDashboard;
import io.fabric8.ocm.model.accountsmgmt.v1.SupportCaseRequest;
import io.fabric8.ocm.model.accountsmgmt.v1.SupportCaseResponse;
import io.fabric8.ocm.model.accountsmgmt.v1.TokenAuthorizationRequest;
import io.fabric8.ocm.model.accountsmgmt.v1.TokenAuthorizationResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * 
     *
     * Returns access token generated from registries in docker format. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1AccessTokenPostTest() throws ApiException {
        AccessToken response = api.apiAccountsMgmtV1AccessTokenPost();

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1AccountsAccountIdGetTest() throws ApiException {
        String accountId = null;
        Account response = api.apiAccountsMgmtV1AccountsAccountIdGet(accountId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the list of labels of the account/organization/subscription.  IMPORTANT: This collection doesn&#x27;t currently support paging or searching, so the returned &#x60;page&#x60; will always be 1 and &#x60;size&#x60; and &#x60;total&#x60; will always be the total number of labels of the account/organization/subscription. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1AccountsAccountIdLabelsGetTest() throws ApiException {
        String accountId = null;
        Integer page = null;
        Integer size = null;
        InlineResponse2001 response = api.apiAccountsMgmtV1AccountsAccountIdLabelsGet(accountId, page, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes the account label. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1AccountsAccountIdLabelsLabelsIdDeleteTest() throws ApiException {
        String accountId = null;
        String labelsId = null;
        api.apiAccountsMgmtV1AccountsAccountIdLabelsLabelsIdDelete(accountId, labelsId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the label. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1AccountsAccountIdLabelsLabelsIdGetTest() throws ApiException {
        String accountId = null;
        String labelsId = null;
        Label response = api.apiAccountsMgmtV1AccountsAccountIdLabelsLabelsIdGet(accountId, labelsId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Updates the account label. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1AccountsAccountIdLabelsLabelsIdPatchTest() throws ApiException {
        String accountId = null;
        String labelsId = null;
        Label body = null;
        Label response = api.apiAccountsMgmtV1AccountsAccountIdLabelsLabelsIdPatch(accountId, labelsId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Create a new account/organization/subscription label. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1AccountsAccountIdLabelsPostTest() throws ApiException {
        String accountId = null;
        Label body = null;
        Label response = api.apiAccountsMgmtV1AccountsAccountIdLabelsPost(accountId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Updates the account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1AccountsAccountIdPatchTest() throws ApiException {
        String accountId = null;
        Account body = null;
        Account response = api.apiAccountsMgmtV1AccountsAccountIdPatch(accountId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the list of accounts. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1AccountsGetTest() throws ApiException {
        Boolean fetchlabelsLabels = null;
        String fields = null;
        String order = null;
        Integer page = null;
        String search = null;
        Integer size = null;
        InlineResponse200 response = api.apiAccountsMgmtV1AccountsGet(fetchlabelsLabels, fields, order, page, search, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Creates a new account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1AccountsPostTest() throws ApiException {
        Account body = null;
        Account response = api.apiAccountsMgmtV1AccountsPost(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Authorizes new cluster creation against an existing subscription. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1ClusterAuthorizationsPostTest() throws ApiException {
        ClusterAuthorizationRequest body = null;
        ClusterAuthorizationResponse response = api.apiAccountsMgmtV1ClusterAuthorizationsPost(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Finds or creates a cluster registration with a registry credential token and cluster identifier. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1ClusterRegistrationsPostTest() throws ApiException {
        ClusterRegistrationRequest body = null;
        ClusterRegistrationResponse response = api.apiAccountsMgmtV1ClusterRegistrationsPost(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves a list of roles. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1CurrentAccessGetTest() throws ApiException {
        Integer page = null;
        String search = null;
        Integer size = null;
        InlineResponse2002 response = api.apiAccountsMgmtV1CurrentAccessGet(page, search, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Creates a new role. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1CurrentAccessPostTest() throws ApiException {
        Role body = null;
        Role response = api.apiAccountsMgmtV1CurrentAccessPost(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes the role. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1CurrentAccessRoleIdDeleteTest() throws ApiException {
        String roleId = null;
        api.apiAccountsMgmtV1CurrentAccessRoleIdDelete(roleId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the role. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1CurrentAccessRoleIdGetTest() throws ApiException {
        String roleId = null;
        Role response = api.apiAccountsMgmtV1CurrentAccessRoleIdGet(roleId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Updates the role. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1CurrentAccessRoleIdPatchTest() throws ApiException {
        String roleId = null;
        Role body = null;
        Role response = api.apiAccountsMgmtV1CurrentAccessRoleIdPatch(roleId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1CurrentAccountGetTest() throws ApiException {
        Account response = api.apiAccountsMgmtV1CurrentAccountGet();

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the feature toggle by providing query context 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1FeatureTogglesFeatureToggleIdQueryPostTest() throws ApiException {
        String featureToggleId = null;
        FeatureToggleQueryRequest body = null;
        FeatureToggle response = api.apiAccountsMgmtV1FeatureTogglesFeatureToggleIdQueryPost(featureToggleId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the version metadata. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1GetTest() throws ApiException {
        Metadata response = api.apiAccountsMgmtV1Get();

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves a list of labels. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1LabelsGetTest() throws ApiException {
        Integer page = null;
        String search = null;
        Integer size = null;
        InlineResponse2003 response = api.apiAccountsMgmtV1LabelsGet(page, search, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Notify user related to subscription/cluster via email 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1NotifyPostTest() throws ApiException {
        SubscriptionNotify body = null;
        SubscriptionNotify response = api.apiAccountsMgmtV1NotifyPost(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves a list of organizations. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1OrganizationsGetTest() throws ApiException {
        Boolean fetchlabelsLabels = null;
        String fields = null;
        Integer page = null;
        String search = null;
        Integer size = null;
        InlineResponse2004 response = api.apiAccountsMgmtV1OrganizationsGet(fetchlabelsLabels, fields, page, search, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the organization. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1OrganizationsOrganizationIdGetTest() throws ApiException {
        String organizationId = null;
        Organization response = api.apiAccountsMgmtV1OrganizationsOrganizationIdGet(organizationId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the list of labels of the account/organization/subscription.  IMPORTANT: This collection doesn&#x27;t currently support paging or searching, so the returned &#x60;page&#x60; will always be 1 and &#x60;size&#x60; and &#x60;total&#x60; will always be the total number of labels of the account/organization/subscription. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1OrganizationsOrganizationIdLabelsGetTest() throws ApiException {
        String organizationId = null;
        Integer page = null;
        Integer size = null;
        InlineResponse2001 response = api.apiAccountsMgmtV1OrganizationsOrganizationIdLabelsGet(organizationId, page, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes the account label. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1OrganizationsOrganizationIdLabelsLabelsIdDeleteTest() throws ApiException {
        String organizationId = null;
        String labelsId = null;
        api.apiAccountsMgmtV1OrganizationsOrganizationIdLabelsLabelsIdDelete(organizationId, labelsId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the label. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1OrganizationsOrganizationIdLabelsLabelsIdGetTest() throws ApiException {
        String organizationId = null;
        String labelsId = null;
        Label response = api.apiAccountsMgmtV1OrganizationsOrganizationIdLabelsLabelsIdGet(organizationId, labelsId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Updates the account label. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1OrganizationsOrganizationIdLabelsLabelsIdPatchTest() throws ApiException {
        String organizationId = null;
        String labelsId = null;
        Label body = null;
        Label response = api.apiAccountsMgmtV1OrganizationsOrganizationIdLabelsLabelsIdPatch(organizationId, labelsId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Create a new account/organization/subscription label. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1OrganizationsOrganizationIdLabelsPostTest() throws ApiException {
        String organizationId = null;
        Label body = null;
        Label response = api.apiAccountsMgmtV1OrganizationsOrganizationIdLabelsPost(organizationId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Updates the organization. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1OrganizationsOrganizationIdPatchTest() throws ApiException {
        String organizationId = null;
        Organization body = null;
        Organization response = api.apiAccountsMgmtV1OrganizationsOrganizationIdPatch(organizationId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the Quota summary. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1OrganizationsOrganizationIdQuotaSummaryGetTest() throws ApiException {
        String organizationId = null;
        Integer page = null;
        String search = null;
        Integer size = null;
        InlineResponse2005 response = api.apiAccountsMgmtV1OrganizationsOrganizationIdQuotaSummaryGet(organizationId, page, search, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the list of resource quotas. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1OrganizationsOrganizationIdResourceQuotaGetTest() throws ApiException {
        String organizationId = null;
        Integer page = null;
        String search = null;
        Integer size = null;
        InlineResponse2006 response = api.apiAccountsMgmtV1OrganizationsOrganizationIdResourceQuotaGet(organizationId, page, search, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Creates a new resource quota. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1OrganizationsOrganizationIdResourceQuotaPostTest() throws ApiException {
        String organizationId = null;
        ResourceQuota body = null;
        ResourceQuota response = api.apiAccountsMgmtV1OrganizationsOrganizationIdResourceQuotaPost(organizationId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes the resource quota. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1OrganizationsOrganizationIdResourceQuotaResourceQuotaIdDeleteTest() throws ApiException {
        String organizationId = null;
        String resourceQuotaId = null;
        api.apiAccountsMgmtV1OrganizationsOrganizationIdResourceQuotaResourceQuotaIdDelete(organizationId, resourceQuotaId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the resource quota. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1OrganizationsOrganizationIdResourceQuotaResourceQuotaIdGetTest() throws ApiException {
        String organizationId = null;
        String resourceQuotaId = null;
        ResourceQuota response = api.apiAccountsMgmtV1OrganizationsOrganizationIdResourceQuotaResourceQuotaIdGet(organizationId, resourceQuotaId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Updates the resource quota. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1OrganizationsOrganizationIdResourceQuotaResourceQuotaIdPatchTest() throws ApiException {
        String organizationId = null;
        String resourceQuotaId = null;
        ResourceQuota body = null;
        ResourceQuota response = api.apiAccountsMgmtV1OrganizationsOrganizationIdResourceQuotaResourceQuotaIdPatch(organizationId, resourceQuotaId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the organization&#x27;s summary dashboard. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1OrganizationsOrganizationIdSummaryDashboardGetTest() throws ApiException {
        String organizationId = null;
        SummaryDashboard response = api.apiAccountsMgmtV1OrganizationsOrganizationIdSummaryDashboardGet(organizationId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Creates a new organization. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1OrganizationsPostTest() throws ApiException {
        Organization body = null;
        Organization response = api.apiAccountsMgmtV1OrganizationsPost(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves a list of permissions. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1PermissionsGetTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        InlineResponse2007 response = api.apiAccountsMgmtV1PermissionsGet(page, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes the permission. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1PermissionsPermissionIdDeleteTest() throws ApiException {
        String permissionId = null;
        api.apiAccountsMgmtV1PermissionsPermissionIdDelete(permissionId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the permission. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1PermissionsPermissionIdGetTest() throws ApiException {
        String permissionId = null;
        Permission response = api.apiAccountsMgmtV1PermissionsPermissionIdGet(permissionId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Creates a new permission. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1PermissionsPostTest() throws ApiException {
        Permission body = null;
        Permission response = api.apiAccountsMgmtV1PermissionsPost(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns access token generated from registries in docker format. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1PullSecretsPostTest() throws ApiException {
        PullSecretsRequest body = null;
        AccessToken response = api.apiAccountsMgmtV1PullSecretsPost(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes the pull secret. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1PullSecretsPullSecretIdDeleteTest() throws ApiException {
        String pullSecretId = null;
        api.apiAccountsMgmtV1PullSecretsPullSecretIdDelete(pullSecretId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves a list of registries. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1RegistriesGetTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        InlineResponse2008 response = api.apiAccountsMgmtV1RegistriesGet(page, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the registry. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1RegistriesRegistryIdGetTest() throws ApiException {
        String registryId = null;
        Registry response = api.apiAccountsMgmtV1RegistriesRegistryIdGet(registryId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the list of accounts. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1RegistryCredentialsGetTest() throws ApiException {
        String order = null;
        Integer page = null;
        String search = null;
        Integer size = null;
        InlineResponse2009 response = api.apiAccountsMgmtV1RegistryCredentialsGet(order, page, search, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Creates a new registry credential. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1RegistryCredentialsPostTest() throws ApiException {
        RegistryCredential body = null;
        RegistryCredential response = api.apiAccountsMgmtV1RegistryCredentialsPost(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the registry credential. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1RegistryCredentialsRegistryCredentialIdGetTest() throws ApiException {
        String registryCredentialId = null;
        RegistryCredential response = api.apiAccountsMgmtV1RegistryCredentialsRegistryCredentialIdGet(registryCredentialId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the list of resource quotas. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1ResourceQuotaGetTest() throws ApiException {
        Integer page = null;
        String search = null;
        Integer size = null;
        InlineResponse2006 response = api.apiAccountsMgmtV1ResourceQuotaGet(page, search, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Creates a new resource quota. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1ResourceQuotaPostTest() throws ApiException {
        ResourceQuota body = null;
        ResourceQuota response = api.apiAccountsMgmtV1ResourceQuotaPost(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes the resource quota. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1ResourceQuotaResourceQuotaIdDeleteTest() throws ApiException {
        String resourceQuotaId = null;
        api.apiAccountsMgmtV1ResourceQuotaResourceQuotaIdDelete(resourceQuotaId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the resource quota. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1ResourceQuotaResourceQuotaIdGetTest() throws ApiException {
        String resourceQuotaId = null;
        ResourceQuota response = api.apiAccountsMgmtV1ResourceQuotaResourceQuotaIdGet(resourceQuotaId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Updates the resource quota. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1ResourceQuotaResourceQuotaIdPatchTest() throws ApiException {
        String resourceQuotaId = null;
        ResourceQuota body = null;
        ResourceQuota response = api.apiAccountsMgmtV1ResourceQuotaResourceQuotaIdPatch(resourceQuotaId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves a list of role bindings. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1RoleBindingsGetTest() throws ApiException {
        Integer page = null;
        String search = null;
        Integer size = null;
        InlineResponse20010 response = api.apiAccountsMgmtV1RoleBindingsGet(page, search, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Creates a new role binding. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1RoleBindingsPostTest() throws ApiException {
        RoleBinding body = null;
        RoleBinding response = api.apiAccountsMgmtV1RoleBindingsPost(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes the role binding. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1RoleBindingsRoleBindingIdDeleteTest() throws ApiException {
        String roleBindingId = null;
        api.apiAccountsMgmtV1RoleBindingsRoleBindingIdDelete(roleBindingId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the role binding. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1RoleBindingsRoleBindingIdGetTest() throws ApiException {
        String roleBindingId = null;
        RoleBinding response = api.apiAccountsMgmtV1RoleBindingsRoleBindingIdGet(roleBindingId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Updates the account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1RoleBindingsRoleBindingIdPatchTest() throws ApiException {
        String roleBindingId = null;
        RoleBinding body = null;
        RoleBinding response = api.apiAccountsMgmtV1RoleBindingsRoleBindingIdPatch(roleBindingId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves a list of roles. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1RolesGetTest() throws ApiException {
        Integer page = null;
        String search = null;
        Integer size = null;
        InlineResponse2002 response = api.apiAccountsMgmtV1RolesGet(page, search, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Creates a new role. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1RolesPostTest() throws ApiException {
        Role body = null;
        Role response = api.apiAccountsMgmtV1RolesPost(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes the role. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1RolesRoleIdDeleteTest() throws ApiException {
        String roleId = null;
        api.apiAccountsMgmtV1RolesRoleIdDelete(roleId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the role. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1RolesRoleIdGetTest() throws ApiException {
        String roleId = null;
        Role response = api.apiAccountsMgmtV1RolesRoleIdGet(roleId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Updates the role. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1RolesRoleIdPatchTest() throws ApiException {
        String roleId = null;
        Role body = null;
        Role response = api.apiAccountsMgmtV1RolesRoleIdPatch(roleId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves a list of Sku Rules. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1SkuRulesGetTest() throws ApiException {
        Integer page = null;
        String search = null;
        Integer size = null;
        InlineResponse20011 response = api.apiAccountsMgmtV1SkuRulesGet(page, search, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the Sku Rule. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1SkuRulesSkuRuleIdGetTest() throws ApiException {
        String skuRuleId = null;
        SkuRule response = api.apiAccountsMgmtV1SkuRulesSkuRuleIdGet(skuRuleId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves a list of SKUS. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1SkusGetTest() throws ApiException {
        Integer page = null;
        String search = null;
        Integer size = null;
        InlineResponse20012 response = api.apiAccountsMgmtV1SkusGet(page, search, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the SKU. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1SkusSkuIdGetTest() throws ApiException {
        String skuId = null;
        SKU response = api.apiAccountsMgmtV1SkusSkuIdGet(skuId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves a list of subscriptions. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1SubscriptionsGetTest() throws ApiException {
        Boolean fetchaccountsAccounts = null;
        Boolean fetchlabelsLabels = null;
        String fields = null;
        String labels = null;
        String order = null;
        Integer page = null;
        String search = null;
        Integer size = null;
        InlineResponse20013 response = api.apiAccountsMgmtV1SubscriptionsGet(fetchaccountsAccounts, fetchlabelsLabels, fields, labels, order, page, search, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Create a new subscription and register a cluster for it. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1SubscriptionsPostTest() throws ApiException {
        SubscriptionRegistration body = null;
        Subscription response = api.apiAccountsMgmtV1SubscriptionsPost(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes the subscription by ID. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1SubscriptionsSubscriptionIdDeleteTest() throws ApiException {
        String subscriptionId = null;
        api.apiAccountsMgmtV1SubscriptionsSubscriptionIdDelete(subscriptionId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the subscription by ID. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1SubscriptionsSubscriptionIdGetTest() throws ApiException {
        String subscriptionId = null;
        Subscription response = api.apiAccountsMgmtV1SubscriptionsSubscriptionIdGet(subscriptionId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the list of labels of the account/organization/subscription.  IMPORTANT: This collection doesn&#x27;t currently support paging or searching, so the returned &#x60;page&#x60; will always be 1 and &#x60;size&#x60; and &#x60;total&#x60; will always be the total number of labels of the account/organization/subscription. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1SubscriptionsSubscriptionIdLabelsGetTest() throws ApiException {
        String subscriptionId = null;
        Integer page = null;
        Integer size = null;
        InlineResponse2001 response = api.apiAccountsMgmtV1SubscriptionsSubscriptionIdLabelsGet(subscriptionId, page, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes the account label. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1SubscriptionsSubscriptionIdLabelsLabelsIdDeleteTest() throws ApiException {
        String subscriptionId = null;
        String labelsId = null;
        api.apiAccountsMgmtV1SubscriptionsSubscriptionIdLabelsLabelsIdDelete(subscriptionId, labelsId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the details of the label. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1SubscriptionsSubscriptionIdLabelsLabelsIdGetTest() throws ApiException {
        String subscriptionId = null;
        String labelsId = null;
        Label response = api.apiAccountsMgmtV1SubscriptionsSubscriptionIdLabelsLabelsIdGet(subscriptionId, labelsId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Updates the account label. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1SubscriptionsSubscriptionIdLabelsLabelsIdPatchTest() throws ApiException {
        String subscriptionId = null;
        String labelsId = null;
        Label body = null;
        Label response = api.apiAccountsMgmtV1SubscriptionsSubscriptionIdLabelsLabelsIdPatch(subscriptionId, labelsId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Create a new account/organization/subscription label. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1SubscriptionsSubscriptionIdLabelsPostTest() throws ApiException {
        String subscriptionId = null;
        Label body = null;
        Label response = api.apiAccountsMgmtV1SubscriptionsSubscriptionIdLabelsPost(subscriptionId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Notify user related to subscription via email 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1SubscriptionsSubscriptionIdNotifyPostTest() throws ApiException {
        String subscriptionId = null;
        SubscriptionNotify body = null;
        SubscriptionNotify response = api.apiAccountsMgmtV1SubscriptionsSubscriptionIdNotifyPost(subscriptionId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Update a subscription 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1SubscriptionsSubscriptionIdPatchTest() throws ApiException {
        String subscriptionId = null;
        Subscription body = null;
        Subscription response = api.apiAccountsMgmtV1SubscriptionsSubscriptionIdPatch(subscriptionId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves items of the collection of reserved resources by the subscription. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1SubscriptionsSubscriptionIdReservedResourcesGetTest() throws ApiException {
        String subscriptionId = null;
        Integer page = null;
        Integer size = null;
        InlineResponse20014 response = api.apiAccountsMgmtV1SubscriptionsSubscriptionIdReservedResourcesGet(subscriptionId, page, size);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the reserved resource. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1SubscriptionsSubscriptionIdReservedResourcesReservedResourceIdGetTest() throws ApiException {
        String subscriptionId = null;
        String reservedResourceId = null;
        ReservedResource response = api.apiAccountsMgmtV1SubscriptionsSubscriptionIdReservedResourcesReservedResourceIdGet(subscriptionId, reservedResourceId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Create a support case related to Hydra 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1SupportCasesPostTest() throws ApiException {
        SupportCaseRequest body = null;
        SupportCaseResponse response = api.apiAccountsMgmtV1SupportCasesPost(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes the support case by Case ID. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1SupportCasesSupportCaseIdDeleteTest() throws ApiException {
        String supportCaseId = null;
        api.apiAccountsMgmtV1SupportCasesSupportCaseIdDelete(supportCaseId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Returns a specific account based on the given pull secret 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAccountsMgmtV1TokenAuthorizationPostTest() throws ApiException {
        TokenAuthorizationRequest body = null;
        TokenAuthorizationResponse response = api.apiAccountsMgmtV1TokenAuthorizationPost(body);

        // TODO: test validations
    }
}
